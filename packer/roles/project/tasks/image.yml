---
# - debug: var=role_spec
# - debug: var=base_spec
# - debug: var=build_spec

- set_fact:
    spec: "{{ base_spec.project | combine(role_spec.project, recursive=True) | combine(base_spec.image, recursive=True) | combine(build_spec, recursive=True) }}"
    # source_spec: '{{ role_spec.builds | selectattr('name', build_spec.source) | list }}'
    source_spec: "{{ role_spec.builds | selectattr('name', 'equalto', build_spec.source) | list | first }}"

# - debug: var=role_spec.builds
# - debug: var=build_spec.source
# - debug: var=source_spec
# - debug: var=spec
# - debug: var=source_image

- name: Set values derived from spec
  set_fact:
    derived_spec:
      target: "{{ build_spec.target | default(role_spec.project.project_name + '-' + build_spec.name) }}"
      dist_path: '{{ spec.name }}'
      base_path: '{{ spec.project_name }}'

- name: Set values derived from spec
  set_fact:
    derived_spec:
      "{{ derived_spec | combine({ 'source_image': source_spec.name + '/' + source_spec.distribution + '/' + source_spec.version + '/images/image.ovf' }) }}"
  when: source_spec.name == 'base'

- name: Set values derived from spec
  set_fact:
    derived_spec:
      # source_image: '{{ role_spec.project.project_name }}/{{ source_spec.name }}/0.0.4/images/image.ovf'
      "{{ derived_spec | combine({ 'source_image': role_spec.project.project_name + '/' + source_spec.name + '/0.0.4/images/image.ovf' }) }}"
  when: source_spec.name != 'base'

- name: Set values derived from spec
  set_fact:
    derived_spec:
      "{{ derived_spec | combine({ 'build_script': derived_spec.target + '-from-' + spec.source }) }}"
      # scripts_dir: '{{ spec.work_dir }}/base/{{ spec.base.distribution }}'
      # build_script: '{{ spec.work_dir }}/base/{{ spec.base.distribution }}/{{ spec.base.version }}/{{ spec.base.target }}-from-{{ spec.base.source }}.json'

- name: Combine derived spec with original spec
  set_fact:
    spec: '{{ spec | combine(derived_spec, recursive=True) }}'

# - debug: var=role_spec
# - debug: var=base_spec
- debug: var=spec
# - debug: var=this.key
# - debug: var=item

- name: Include base profile vars
  include_vars:
    file: '{{ spec.profile }}.yml'
    name: build_env

# - debug: var=build_env

- name: Copy version.rb
  copy:
    src: version.rb
    dest: '{{ spec.work_dir }}/version.rb'
    mode: 0755

# TODO: Refactor to remove hard coded values
- name: Get current version
  command: '{{ spec.work_dir }}/version.rb {{ role_spec.project.project_name }} {{ build_spec.name }} patch'
  register: current_version

- set_fact:
    box_version: '{{ current_version.stdout }}'

- name: Include s3 push vars
  include_vars:
    file: push.yml
    name: push_env
  when: spec.push is defined and spec.push | bool == True
- debug: var=push_env

- set_fact:
    base_env:
      provisioners:
        _order: [add_ansible, ansible]
        add_ansible:
          type: shell
          inline:
            - 'sudo apt install git python-pip --yes'
            - 'sudo pip install ansible'
        ansible:
          playbook_file: "{{ spec.provision_path | default(playbook_dir + '/provision') }}/{{ build_spec.playbook | default(spec.target + '.yml') }}"
          host_alias: backend
          type: ansible
          user: '{{ spec.ssh_username }}'
          extra_arguments: [ "--extra-vars", "clone_repos=no" ]
          ansible_env_vars:
            - "ANSIBLE_RETRY_FILES_ENABLED=false"
            - "ANSIBLE_ROLES_PATH={{ spec.provision_path | default(playbook_dir.split('/')[0:-1] | join('/')) }}/roles"

# - debug: var=base_env

- name: Set env for builder
  set_fact:
    env: "{{ base_env | combine(build_env, recursive=True) | combine(push_env | default({}), recursive=True) }}"
- debug: var=env

# - meta: end_play

- name: 'Create {{ spec.work_dir }}/{{ spec.base_path }}/{{ spec.dist_path }}'
  file:
    path: '{{ spec.work_dir }}/{{ spec.base_path }}/{{ spec.dist_path }}'
    state: directory

- name: 'Template packer build definition: {{ spec.work_dir }}/{{ spec.base_path }}/{{ spec.dist_path }}/{{ spec.build_script }}.json'
  template:
    src: build-script.json.j2
    dest: '{{ spec.work_dir }}/{{ spec.base_path }}/{{ spec.dist_path }}/{{ spec.build_script }}.json'

- name: 'Template user shell script: {{ spec.work_dir }}/base-{{ spec.build_script }}'
  template:
    src: build.j2
    dest: '{{ spec.work_dir }}/build-{{ spec.target }}-from-{{ spec.source }}'
    mode: 0755

# - meta: end_play
