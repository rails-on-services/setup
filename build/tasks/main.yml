---
- name: Include distibution/version vars
  include_vars:
    file: '{{ spec.distribution }}/{{ spec.version }}.yml'
    name: distro_version_env
  when: spec.profile == 'iso'

- name: Include build profile vars
  include_vars:
    file: '{{ spec.profile }}.yml'
    name: profile_env

- name: Include s3 push vars
  include_vars:
    file: push.yml
    name: push_env
  when: spec.push | bool

- set_fact:
    env: "{{ base_env | combine(distro_version_env | default({}), recursive=True) | combine(profile_env, recursive=True) | combine(push_env | default({}), recursive=True) }}"

# - debug: var=base_env
# - debug: var=distro_version_env
# - debug: var=profile_env
# - debug: var=env
# - meta: end_play

- name: 'Create {{ spec.work_dir }}/{{ spec.scripts_dir }}'
  file:
    path: '{{ spec.work_dir }}/{{ spec.scripts_dir }}'
    state: directory

- name: 'Template {{ spec.work_dir }}/{{ spec.build_script }}'
  template:
    src: build-script.json.j2
    dest: '{{ spec.work_dir }}/{{ spec.build_script }}'

- name: Copy json.rb
  copy:
    src: json.rb
    dest: '{{ spec.work_dir }}/json.rb'
    mode: 0755

- name: Template the boot config
  template:
    src: '{{ spec.distribution }}/{{ spec.version }}/{{ distro_version_env.boot_file }}.j2'
    dest: '{{ spec.work_dir }}/{{ spec.scripts_dir }}/{{ spec.version }}/{{ distro_version_env.boot_file }}'

- name: 'Build from {{ spec.build_script }}'
  command: 'packer build --force {{ spec.build_script }}'
  args:
    chdir: '{{ spec.work_dir }}'
  when: false


#- set_fact:
    # Calculate the next box version
#         FileUtils.cp("#{Prepd.files_dir}/machine/#{os_env['base_dir']}/preseed.cfg", '.')
#         system(build_env, "packer build #{action_file}")
#         FileUtils.rm('preseed.cfg')

#     def box_version
#       return '0.0.1' unless File.exists?(box_json_file)
#       json = JSON.parse(File.read(box_json_file))
#       current_version = json['versions'].first['version']
#       return current_version if build_action.eql?(:push)
#       inc(current_version, type: bump)
#     end
# 
#     def inc(version, type: 'patch')
#       idx = { 'major' => 0, 'minor' => 1, 'patch' => 2 }
#       ver = version.split('.')
#       ver[idx['patch']] = 0 if %w(major minor).include? type
#       ver[idx['minor']] = 0 if %w(major).include? type
#       ver[idx[type]] = ver[idx[type]].to_i + 1
#       ver.join('.')
#     end
